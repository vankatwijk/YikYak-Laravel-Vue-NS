webpackHotUpdate("bundle",{

/***/ "../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js?!./components/Background.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Login__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./components/Login.vue");
/* harmony import */ var _Post__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./components/Post.vue");
/* harmony import */ var _NoteDetails__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./components/NoteDetails.vue");
/* harmony import */ var nativescript_geolocation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/nativescript-geolocation/geolocation.js");
/* harmony import */ var nativescript_geolocation__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nativescript_geolocation__WEBPACK_IMPORTED_MODULE_3__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//get external pages and plugins




var httpModule = __webpack_require__("../node_modules/tns-core-modules/http/http.js");

var appSettings = __webpack_require__("../node_modules/tns-core-modules/application-settings/application-settings.js");



var utils = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

/* harmony default export */ __webpack_exports__["default"] = ({
  computed: {},
  watch: {},

  created() {
    //on creation ensure the user has gps enabled otherwise the app will crash
    nativescript_geolocation__WEBPACK_IMPORTED_MODULE_3__["enableLocationRequest"](true).then(() => {
      nativescript_geolocation__WEBPACK_IMPORTED_MODULE_3__["isEnabled"]().then(isLocationEnabled => {
        console.log('result is ' + isLocationEnabled);

        if (!isLocationEnabled) {
          this.needLocation = false;
          this.locationFailure = true; // potentially do more then just end here...

          return;
        } // MUST pass empty object!!


        nativescript_geolocation__WEBPACK_IMPORTED_MODULE_3__["getCurrentLocation"]({}).then(result => {
          console.log('loc result', result);
          this.needLocation = false;
          this.location = result;
        }).catch(e => {
          console.log('loc error', e);
        });
      });
    }); //a delay is is needed to run the inital starting function due to nativescript bug

    setTimeout(() => {
      this.onStart();
    }, 500);
  },

  data() {
    return {
      needLocation: true,
      locationFailure: false,
      location: null,
      drawerToggle: false,
      drawer1: "",
      drawer2: "",
      mainColor: "#1aa3ff",
      APIURL: "",
      name: "",
      index: 'list',
      notes: []
    };
  },

  methods: {
    onStart() {},

    selectNote(id) {},

    getNotes() {
      console.log("job has been scheduled !");
      this.scheduleJob();
    },

    scheduleJob() {
      var context = utils.ad.getApplicationContext();
      var component = new android.content.ComponentName(context, com.tns.components.notifications.MyJobService.class);
      console.log(component); // Set the id of the job to something meaningful for you

      var builder = new android.app.job.JobInfo.Builder(1, component); // Optional: Set how often the task should be triggered. The minimum is 15min.

      builder.setPeriodic(15 * 60 * 1000); // Optional: Set additional requirements under what conditions your job should be triggered

      builder.setRequiresCharging(false);
      var jobScheduler = context.getSystemService(android.content.Context.JOB_SCHEDULER_SERVICE);
      console.log("Job Scheduled: " + jobScheduler.schedule(builder.build()));
    },

    onPullToRefreshInitiated(_ref) {
      var {
        object
      } = _ref;
      //this method reloads the list of notes when they pull down on the list of available notes
      this.$nextTick(() => {
        this.getNotes();
        object.notifyPullToRefreshFinished();
      });
    },

    onDrawerClosed() {
      this.drawerToggle = false;
    },

    onDrawerOpened() {
      this.drawerToggle = true;
    },

    toggleDrawer() {
      this.$refs.drawer.nativeView.toggleDrawerState();
    },

    homeTap() {},

    postTap() {
      //navigation home button clicked
      this.$navigateTo(_Post__WEBPACK_IMPORTED_MODULE_1__["default"], {
        animated: false,
        clearHistory: true
      });
    },

    logout() {
      //logout of the current user
      this.$navigateTo(_Login__WEBPACK_IMPORTED_MODULE_0__["default"], {
        clearHistory: true
      });
    },

    goToLogin() {
      //logout of the current user
      this.$navigateTo(_Login__WEBPACK_IMPORTED_MODULE_0__["default"], {
        clearHistory: true
      });
    },

    showDetails() {}

  }
});

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,